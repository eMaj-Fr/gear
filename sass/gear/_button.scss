// btn-color
@mixin _btn-color( $color ){
	$_color-name 	: nth( $color , 1 );
	$_color-bg 		: nth( $color , 2 );
	$_color-font 	: "";
	$_color-border 	: "";
	// font-color
	@if length( $color ) < 3{
		@if lightness( $_color-bg ) > lightness( #BBB ){
			$_color-font : $FONT-COLOR;
		}@else{
			$_color-font 	: #FFF;
		}
	}@else{
		$_color-font 		: nth( $color , 3 );
	}
	// border-color
	@if length( $color ) < 4{
		$_color-border 		: $_color-bg ;
	}@else{
		$_color-border 		: nth( $color , 4 );
	}

	// output
	background-color 	: $_color-bg ;
	color 				: $_color-font ;
	border-color 		: $_color-border ;
	// hover
	&:hover{
		background-color: darken( $_color-bg , 5% );
		border-color 	: darken( $_color-border , 5% );
	}
	// active
	&:active,
	.active{
		background-color: darken( $_color-bg , 10% ) ;
		border-color 	: darken( $_color-border , 10% ) ;
	}
}

// btn-size
@mixin _btn-size( $size ){
	$_size-name 	: nth( $size , 1 );
	$_size-height 	: nth( $size , 2 );
	$_size-font 	: "";
	$_size-padding 	: "";
	$_size-border 	: "";

	// font-size
	@if length( $size ) < 3{
		$_size-font 	: $_size-height / 2.5 ;
	}@else{
		$_size-font 	: nth( $size , 3 );
	}
	// padding
	@if length( $size ) < 4{
		$_size-padding 		: 0 $_size-height / 2 ;
	}@else{
		$_size-padding 		: nth( $size , 4 );
	}
	// border-width
	@if length( $size ) < 5{
		$_size-border 		: 1px ;
	}@else{
		$_size-border 		: nth( $size , 5 );
	}

	// output
	height 			: $_size-height ;
	border-width 	: $_size-border ;
	padding 		: $_size-padding ;
	font-size 		: $_size-font ;
	@include _line-height( $_size-height );
}




// btn
@mixin btn( $colors , $sizes , $radius : 4px , $btn_class : "btn" ){
	$template : $PX + "btn";
	@if index( $TPL , $template ) == false {
		// create the %btn Placeholder
		%#{$template}{
    		cursor 			: pointer ;
			display 		: inline-block ;
			border-style 	: solid ;

			// apply first color / size to default behavior
			@include _btn-color( nth( $colors , 1 ) );
			@include _btn-size( nth( $sizes , 1 ) );

			// create all the colors classes
			@each $color in $colors{
				$_color-name 	: nth( $color , 1 );

				&.#{$PX + $btn_class+"-"+$_color-name}{
					@include _btn-color( $color );
				}
			}
			// create all the sizes classes
			@each $size in $sizes{
				$_size-name 	: nth( $size , 1 );

				&.#{$PX + $btn_class+"-"+$_size-name}{
					@include _btn-size( $size );
				}
			}
		}
		$TPL : append( $TPL , $template );
	}

	// create the .btn class which extends %btn
	.#{$btn_class}{
		@extend %#{ $template };
		@include border-radius( $radius );
	}
}

// btn-size
@mixin _btn-sign-size( $size ){
	@include _btn-size( $size );
	$_size-name 	: nth( $size , 1 );
	$_size-width 	: nth( $size , 2 );
	width  		: $_size-width ;
	text-align 	: center ;
	padding 	: 0 ;
}

// btn-sign
@mixin btn-sign(  $colors , $sizes , $radius : 4px , $btn-sign_class : "btn-sign" ){

	// @include btn( $colors , $sizes , $radius, $btn-sign_class );
	
	$template : $PX + "btn-sign";

	@if index( $TPL , $template ) == false {
		// create the %btn Placeholder
		%#{$template}{
			// extend %btn template
			@extend %#{$PX + "btn"} ;

			// apply first color / size to default behavior
			@include _btn-color( nth( $colors , 1 ) );
			@include _btn-sign-size( nth( $sizes , 1 ) );

			// create all the colors classes
			@each $color in $colors{
				$_color-name 	: nth( $color , 1 );

				&.#{$PX + $btn-sign_class+"-"+$_color-name}{
					@include _btn-color( $color );
				}
			}
			// create all the sizes classes
			@each $size in $sizes{
				$_size-name 	: nth( $size , 1 );

				&.#{$PX + $btn-sign_class+"-"+$_size-name}{
					@include _btn-sign-size( $size );	
				}
			}
		}
		$TPL : append( $TPL , $template );
	}

	// create the .btn-sign class which extends %btn-sign template
	.#{$btn-sign_class}{
		@extend %#{ $template };
		@include border-radius( $radius );
	}

}