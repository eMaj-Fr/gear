@mixin headings( $headings : () ){

	@for $_i from 1 through 6{

		h#{$_i}{
			font-size: 2em - ($_i - 1) * .2;
			margin: 40px - ($_i - 1) * 5 0;
			font-weight: 400;
		}
	}
}

@mixin text( $options : () ){
	$options : map-merge((
			"text-sans"			: $FONT-FAMILY_SANS ,
			"text-serif"		: $FONT-FAMILY_SERIF ,
			"text-mono"			: $FONT-FAMILY_MONO ,
			"text_class" 		: "text",
			"text-sans_suffix" 	: "sans",
			"text-serif_suffix" : "serif",
			"text-mono_suffix" 	: "mono"
		) , $options );

	$text_class : $PX + map-get( $options , "text_class" );
	// FONT-FAMILY
	@each $family in sans , serif , mono {
		.#{ $text_class +"-"+ map-get( $options , "text-"+$family+"_suffix" ) }{
			font-family: map-get( $options , "text-"+$family ) ;
		}
	}

	// TEXT-ALIGN
	@each $style in left , right , center , justify{
		.#{ $text_class +"-"+ $style }{
			text-align: $style;
		}
	}
}

@mixin link( $color , $options : () ){
	$options : map-merge((
		"underline_normal"  : false,
		"underline_hover"	: true
		), $options );

	a{
		color : $color ;
		@if map-get( $options , "underline_normal" ) {
			text-decoration: underline;
		}@else{
			text-decoration: none;
		}
		&:hover{
			@if map-has-key( $options , "color_hover") {
				color : map-get( $options , "color_hover" );
			}@else{
				color : darken( $color , 10% );
			}
		}
		&:active,
		&.active{
			@if map-has-key( $options , "color_active") {
				color : map-get( $options , "color_active" );
			}@else{
				color : darken( $color , 20% );
			}
		}
		&:visited{
			@if map-has-key( $options , "color_visited") {
				color : map-get( $options , "color_visited" );
			}@else{
				color : $color;
			}
			@if map-get( $options , "underline_normal" ) {
				text-decoration: underline;
			}@else{
				text-decoration: none;
			}
		}
		&:hover,
		&:active,
		&.active{
			@if map-get( $options , "underline_hover" ) {
				text-decoration: underline;
			}@else{
				text-decoration: none;
			}
		}
	}		
}

@mixin list( $options : () ){
	$options : map-merge( (
			"padding-left"				: 20px,
			"ul_styles"					: disc circle square,
			"ol_styles"					: decimal lower-latin lower-roman,
			"list_class"				: "list",
			"list-unstyled_suffix"		: "unstyled",
			"list-unstyled-all_suffix"	: "all",
			"list-inline_suffix"		: "inline"
		), $options );

	$ul-styles : map-get( $options , "ul_styles" );
	$ol-styles : map-get( $options , "ol_styles" );
	$list_class : $PX + map-get( $options , "list_class") ;
	$list-unstyled_class		: $list_class +"-"+ map-get( $options , "list-unstyled_suffix");
	$list-unstyled-all_class	: $list_class +"-"+ map-get( $options , "list-unstyled-all_suffix");
	$list-inline_class			: $list_class +"-"+ map-get( $options , "list-inline_suffix");
	
	ul{
		list-style : nth( $ul-styles , 1 );
		@if length($ul-styles) > 1 {
			ul {
				list-style : nth( $ul-styles , 2 );
				@if length($ul-styles) > 2 {
					ul {
						list-style : nth( $ul-styles , 3 )
					}
				}
			}
		}
	}

	ol{
		list-style : nth( $ol-styles , 1 );
		@if length($ol-styles) > 1 {
			ol {
				list-style : nth( $ol-styles , 2 );
				@if length($ol-styles) > 2 {
					ol {
						list-style : nth( $ol-styles , 3 )
					}
				}
			}
		}
	}

	ul,
	ol{
		padding-left: map-get( $options , "padding-left" );
		&.#{$list-unstyled_class}{
			list-style: none;
			padding:0;
		}
		&.#{$list-unstyled-all_class},
		&.#{$list-unstyled-all_class} ul,{
			list-style: none;
			padding:0;
		}
		&.#{$list-inline_class}{
			list-style: none;
			padding:0;
			& > li{
				float: left;
			}
		}
	}
}

@mixin list-icon( $font-family, $lists , $options : ()){
	$options : map-merge((
			"list_class" : "list"
		), $options );

	$list_class : $PX + map-get( $options , "list_class" );

	%list-icon{
		list-style:none;
		position: relative;
			&:before{
				font-family: $font-family ;
				font-size: .8em;
				display: inline-block;
				position: absolute;
				margin-top: .2em;
				margin-left: -1.5em;
			}
	}

	@each $name , $icon in $lists {
		$name : $list_class +"-"+ $name;
		ol.#{$name} li,
		ul.#{$name} li{
			@extend %list-icon;
			&:before{
				content: $icon ;
			}
		}
	}
}